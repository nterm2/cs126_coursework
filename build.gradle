/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'commons-io:commons-io:2.11.0'


    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // These dependencies are used by the application.
    implementation 'org.json:json:20220924'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'commons-cli:commons-cli:1.5.0'

    // //sqlite jdbc for really hacky basic implementations
    // implementation 'org.xerial:sqlite-jdbc:3.40.0.0'
}

application {
    // Define the main class for the application.
    mainClass = 'WarwickPlus'
}

task studentrun(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'WarwickPlus'
    args = ['-n', '5000']
}

task minrun(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'WarwickPlus'
    args = ['-n', '100']
}

task examplerun(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'RunWithExampleStores'
}

task Testbed(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'Testbed'
}


//Example implementation from Shubham Chaudhary:
//https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

//Note for batch testing: Gradle isn't that happy about running the same test
//multiple times at once (file lock issues). But running
//tests for two projects at the same time (in different folders)
//it doesn't care about.

tasks.withType(Test) {
      // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "4g"

    // set JVM arguments for the test JVM(s)
    // jvmArgs '-XX:MaxPermSize=2048m'

    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED
            //    TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
